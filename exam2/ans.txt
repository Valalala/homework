
1. 
Network(DDN)	IP(DDN)		Netmask(CIDR)	Broadcast(DDN)
a. 		10.129.4.5	/13		b.
172.81.32.0	c.		d.		172.81.47.255

/13 == 11111111.11111000.00000000.00000000 

a. 10.129.4.5 & /13 = 10.128.0.0

b. 10.129.4.5 | ~(/13) = 10.135.255.255

c. Any address between 172.81.32.0 and 172.81.47.255 inclusive. 

d.	172.81.32.0   == 10101100.01010001.00100000.00000000
	172.81.47.255 == 10101100.01010001.00101111.11111111
	
~(172.81.32.0 ^ 172.81.47.255) = 11111111.11111111.11110000.00000000 = /20

Network(DDN)	IP(DDN)		Netmask(CIDR)	Broadcast(DDN)
10.128.0.0 	10.129.4.5	/13		10.135.255.255
172.81.32.0	172.81.32.1	/20		172.81.47.255


2. 
a. https://gist.github.com/nolim1t/126991 

b.
//Walter Rasmussen - Spring 2018
// Webpage fetch using tcp
//tcp.c
// Code taken from nolim1t on github
// https://gist.github.com/nolim1t/126991

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#include <netinet/tcp.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>

int socket_connect(char *host, in_port_t port){
	struct hostent *hp;
	struct sockaddr_in addr;
	int on = 1, sock;  
	//int sock;

	if((hp = gethostbyname(host)) == NULL){
		herror("gethostbyname");
		exit(1);
	}
	//bcopy(hp->h_addr, &addr.sin_addr, hp->h_length);
	memset(&addr, '0', sizeof(addr));

	addr.sin_port = htons(port);
	addr.sin_family = AF_INET;
	
	//if(inet_pton(AF_INET, hp->h_addr_list[0], &addr.sin_addr)<=0) {
	//	printf("\nInvalid address/ Address not supported \n");
	//	return -1;
	//}
	//addr.sin_addr.s_addr = *(long*)(hp->h_addr_list[0]);
	//addr.sin_addr = hp->h_addr_list[0];
	sock = socket(AF_INET, SOCK_STREAM, 0);
	setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (const char *)&on, sizeof(int));

	if(sock < 0){
		perror("setsockopt");
		exit(1);
	}
	
	//if(connect(sock, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) < 0){
	if(connect(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0){
		perror("connect");
		exit(1);

	}
	return sock;
}
 
#define BUFFER_SIZE 1024
#define REQUEST "GET /index.html HTTP/1.1\\r\\nhost: myhost\\r\\n\\r\\n"

int main(int argc, char *argv[]){
	int fd;
	char buffer[BUFFER_SIZE];

	if(argc < 3){
		fprintf(stderr, "Usage: %s <hostname> <port>\n", argv[0]);
		exit(1); 
	}
       
	fd = socket_connect(argv[1], atoi(argv[2])); 
	write(fd, REQUEST, strlen(REQUEST)); // write(fd, char[]*, len);  
	bzero(buffer, BUFFER_SIZE);
	
	while(read(fd, buffer, BUFFER_SIZE - 1) != 0){
		printf("%s\n", buffer);
		bzero(buffer, BUFFER_SIZE);
	}

	shutdown(fd, SHUT_RDWR); 
	close(fd); 

	return 0;
}


3. "route -n" copy paste
Elessar
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         1.2.4.100   	0.0.0.0         UG    303    0        0 eth1
10.0.0.0   	0.0.0.0		255.254.0.0   	U     303    0        0 eth0
141.114.3.0	0.0.0.0		255.255.255.192	U     303    0        0 eth2
1.2.0.0		0.0.0.0 	255.255.128.0	U     303    0        0 eth1

Legolas
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         141.114.3.10    0.0.0.0         UG    303    0        0 eth0
141.114.3.0	0.0.0.0         255.255.255.192 U     303    0        0 eth0


4.	IP Source	IP Destination	MAC Source		MAC Destination
Frodo	10.1.2.3	141.114.3.3	00:00:00:00:00:11	55:00:00:00:00:00
Elessar	10.1.2.3	141.114.3.3	66:00:00:00:00:00	00:00:00:00:00:22
Legolas	


5. 	IP Source	IP Destination	MAC Source		MAC Destination
Legolas	141.114.3.3	1.2.4.100	00:00:00:00:00:22	66:00:00:00:00:00
Elessar	141.114.3.3	1.2.4.100	77:00:00:00:00:00	FF:00:00:00:00:00
Gandalf


6.
function makeTable($w, $h){
	echo "<table>";
	echo "<table border=\"1\">";
	for ($i=0;$i<$h;$i++) {
		echo "<tr>\n";
		for ($j=0;$j<$w;$j++){
			$v = $i + $j*$h;
			echo "<td>$v</td>\n";
		}
		echo "</tr>\n";
	}
	echo "</table>";
}


7. Assuming date column is in yyyy/mm/dd format and chronological order.
select date, time, MAX(price) from bicoin where date between datetime('now','-1 month') and datetime('now');


8.
a.	sudo apt update
	apt search american
	sudo apt install wamerican-large

b.
#!/usr/bin/perl
# Walter Rasmussen - Spring 2018
# Histogram of letters from dict
# dicHist.pl

$fn="/usr/share/dict/american-english-large"; # Location of words
open(IN,"$fn") or die "Cannot open\n"; # open file

while (<IN>) {
	chomp; # clean newlines 
	@word = split(//); # Seperate each char
	foreach $letter (@word) {
		if ($letter!~m/[A-z]/) { next; } # All chars not A-z are ignored
		$hist{$letter}++; # Chars used as keys, value is number of appearances
	}
}

@histkeys = sort(keys(%hist)); # Gets the keys in alphabetical order
$max = (sort {$a <=> $b} values(%hist))[-1]; # Get largest value in Hash
foreach $key (@histkeys){
	# Normilizes by multipling by 70 then dividing by the largest value in Hash
	# Prints key then # of * based on normilized value 
	print("$key\: " . ('*' x ($hist{$key} * 70 / $max)) . "\n");
}

close(IN); # close file


9. Take as much information as you can about the incident(when you discovered it, what you discovered) to your superviser. Discuss security: The situation is time sensitive so find a superviser as quickly as possible. Discuss ethics: You are responsible for informing someone, but you do not have the authority to take action. (There is a small chance that harry just has a terrible name convention.)


10. enscript -PPDF --header='ECE 331|Exam 02|Walter Rasmussen' ans.txt



